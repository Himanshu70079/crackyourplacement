class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
      std::unordered_map<int, int> num_map;
        
        for (int i = 0; i < nums.size(); ++i) {
            int complement = target - nums[i]; // Calculate the complement
            
            // Check if the complement is already in the map
            if (num_map.find(complement) != num_map.end()) {
                return {num_map[complement], i}; 
            }
            
            // Store the current number and its index in the map
            num_map[nums[i]] = i;
        }
        
        return {}; 
     
     method 2->
     
     
     //   int n=nums.size();
     //   for(int i=0;i<n-1;i++)
     //   {
     //       for(int j=i+1;j<n;j++)
//{
      //      if(nums[i]+nums[j]==target)
      //     {    return {i,j};
      //     }
     //       }
     //   }
     //        return{};
    }
};
